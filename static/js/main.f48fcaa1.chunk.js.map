{"version":3,"sources":["Components/TimerControl.js","App.js","index.js","Ressources/beep-06.wav"],"names":["TimerControl","className","id","this","props","titleID","title","subID","onClick","value","lengthID","length","addID","Component","pomoInterval","fn","intervalTime","wrapper","cancel","timeout","nextAt","Date","getTime","setTimeout","clearTimeout","App","timerToClock","minutes","Math","floor","state","timer","seconds","setBreakLength","event","lengthControl","currentTarget","breakLength","setSessionLength","sessionLength","timerToChange","addsub","currentLength","timerType","timerRunning","setState","toggleTimer","intervalID","startCountDown","decrementTimer","phaseControl","checkForLastMinute","beeper","switchTimerType","t","alarmColor","color","playBeep","play","type","resetTimer","pause","currentTime","style","preload","ref","audio","src","beep","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f48fcaa1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TimerControl extends Component {\n    // Passing most stuff via props to make the component reusable\n    // for both session and break length control\n    render() {\n        return (\n            <div className='length-control'>\n                <div id={this.props.titleID}>{this.props.title}</div>\n                <button\n                    className='btn-control'\n                    id={this.props.subID}\n                    onClick={this.props.onClick}\n                    value='-'\n                >\n                    <i className=\"fa fa-arrow-down fa-2x\"></i>\n                </button>\n                <div className='btn-control' id={this.props.lengthID}>\n                    {this.props.length}\n                </div>\n                <button\n                    className='btn-control'\n                    id={this.props.addID}\n                    onClick={this.props.onClick}\n                    value='+'\n                >\n                    <i className=\"fa fa-arrow-up fa-2x\"></i>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default TimerControl;","import React, { Component } from 'react';\nimport TimerControl from './Components/TimerControl';\nimport beep from './Ressources/beep-06.wav';\n\n\n// Self adjusting timer\n// Both setTimeout and setInterval are prone to piling up small bits of extra time\n// After some googling I found that most people use the Date() function to calculate\n// and correct the timer. \n// Below is an interval function that calls a given function on a self adjusted timer\n// and returns a function to stop its execution\nconst pomoInterval = (fn, intervalTime) => {\n  // define variables for the wrapper, cancel and timeout function\n  var wrapper, cancel, timeout = null;\n  // calculate next tick\n  var nextAt = new Date().getTime() + intervalTime;\n\n  // wrapper function that calls itself every tick, executing the given function\n  wrapper = () => {\n    nextAt += intervalTime;\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime()); // self correcting every time\n    return fn();\n  }\n\n  // cancel function so the pomoInterval can be cancelled from outside\n  cancel = () => {\n    return clearTimeout(timeout);\n  }\n\n  // set the 1st timeout, starting the intervals\n  timeout = setTimeout(wrapper, nextAt - new Date().getTime());\n\n  // finally, return the cancel function\n  return {\n    cancel: cancel\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerRunning: false,      // true\n      timerType: 'Session',     // 'Break'\n      timer: 1500,              // timer in seconds, 25*60 = 1500\n      intervalID: '',\n      alarmColor: { color: 'white' }  // default of white, setting to red when < 60s\n    }\n  }\n\n  timerToClock = () => {\n    // calculate minutes and seconds\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer % 60;\n    // Add extra 0's if needed\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    // return the formated time\n    return minutes + ':' + seconds;\n  }\n\n  // both setBreakLength and setSessionLength call the same function\n  // keep it DRY\n  setBreakLength = (event) => {\n    this.lengthControl(\n      'breakLength',              // which length will be adjusted\n      event.currentTarget.value,  // add or sub from the length\n      this.state.breakLength,     // the current length\n      'Break'                     // check current timerType against this\n                                  // to determine if timer needs reset\n    );\n  }\n  setSessionLength = (event) => {\n    this.lengthControl(\n      'sessionLength',\n      event.currentTarget.value,\n      this.state.sessionLength,\n      'Session'\n    );\n  }\n\n  // function to adjust timer length and reset timer if need be\n  lengthControl = (timerToChange, addsub, currentLength, timerType) => {\n    // no adjustments when timer is currently running\n    if (this.state.timerRunning) { return; }\n    // if active (but paused) timerType === timerType, then reset the timer\n    if (this.state.timerType === timerType) {\n      if (addsub === '-' && currentLength !== 1) {  // can't go below 1\n        this.setState({\n          [timerToChange]: currentLength - 1,\n          timer: currentLength * 60 - 60    // subtracting the minute\n        });\n      } else if (addsub === '+' && currentLength !== 60) {  // can't go above 60 either\n        this.setState({\n          [timerToChange]: currentLength + 1,\n          timer: currentLength * 60 + 60    // adding the minute\n        });\n      }\n    } else {  // time for the other timerType can be adjusted freely\n      if (addsub === '-' && currentLength !== 1) {\n        this.setState({ [timerToChange]: currentLength -1 })\n      } else if (addsub === '+' && currentLength !== 60) {\n        this.setState({ [timerToChange]: currentLength + 1 });\n      }\n    }\n  }\n\n  // toggle timer between running and paused\n  toggleTimer = () => {\n    if (!this.state.timerRunning) {\n      this.startCountDown();\n      this.setState({ timerRunning: true });\n    } else {\n      this.setState({ timerRunning: false });\n      if (this.state.intervalID) {\n        this.state.intervalID.cancel();   // stop the pomoInterval\n      }\n    }\n  }\n  // start the countdown\n  startCountDown = () => {\n    this.setState({\n      intervalID: pomoInterval(() => {\n        this.decrementTimer();\n        this.phaseControl();\n      }, 1000)\n    });\n  }\n  // decreases timer by 1s\n  decrementTimer = () => {\n    this.setState({ timer: this.state.timer - 1 });\n  }\n\n  // handles last minute color, beeping and initiating the switch of phases\n  phaseControl = () => {\n    let timer = this.state.timer;\n    this.checkForLastMinute(timer);\n    this.beeper(timer);\n    if (timer < 0) {\n      // cancel interval when timer hits 0\n      if (this.state.intervalID) { this.state.intervalID.cancel(); }\n      // Start new Countdown\n      this.startCountDown();\n      // Check timerType, switch to the other one\n      if (this.state.timerType === 'Session') {\n        this.switchTimerType(this.state.breakLength * 60, 'Break');\n      } else {\n        this.switchTimerType(this.state.sessionLength * 60, 'Session');\n      }\n    }\n  }\n\n  // check if timer is in the last minute, if so change text color\n  checkForLastMinute = (t) => {\n    if (t < 61) { this.setState({ alarmColor: { color: '#a50d0d' } }); }\n    else { this.setState({ alarmColor: { color: 'white' } }) }\n  }\n\n  // play the beep if timer hits 0\n  beeper = (t) => {\n    if (t === 0) {\n      this.playBeep.play();\n    }\n  }\n\n  // switch timer to type with length\n  switchTimerType = (length, type) => {\n    this.setState({\n      timer: length,\n      timerType: type,\n      alarmColor: { color: 'white' }\n    });\n  }\n\n  // reset timer to default values\n  resetTimer = () => {\n    // reset state\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timerRunning: false,\n      timerType: 'Session',\n      timer: 1500,\n      intervalID: '',\n      alarmColor: { color: 'white' }\n    })\n    // make sure intervals are cancelled\n    if (this.state.intervalID) { this.state.intervalID.cancel() }\n    // make sure beep sounds are paused and reset the sound time\n    this.playBeep.pause();\n    this.playBeep.currentTime = 0;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='title'>Pomodoro Clock</h1>\n        {/* Control for break length */}\n        <TimerControl\n          subID='break-decrement'\n          addID='break-increment'\n          length={this.state.breakLength}\n          lengthID='break-length'\n          onClick={this.setBreakLength}\n          title='Break Length'\n          titleID='break-label'\n        />\n        {/* Control for session length */}\n        <TimerControl\n          subID='session-decrement'\n          addID='session-increment'\n          length={this.state.sessionLength}\n          lengthID='session-length'\n          onClick={this.setSessionLength}\n          title='Session Length'\n          titleID='session-label'\n        />\n        {/* Timer, just shows the time*/}\n        <div className='timer' style={this.state.alarmColor}>\n          <div className='timer-wrapper'>\n            <div id='timer-label'>{this.state.timerType}</div>\n            <div id='time-left'>{this.timerToClock()}</div>\n          </div>\n        </div>\n        {/* Timer Control, Start/Pause and Reset */}\n        <div className='timer-control'>\n          <button id='start_stop' onClick={this.toggleTimer}>\n            <i className='fa fa-play fa-2x' />\n            <i className='fa fa-pause fa-2x' />\n          </button>\n          <button id='reset' onClick={this.resetTimer}>\n            <i className='fa fa-refresh fa-2x' />\n          </button>\n        </div>\n        {/* audio element for the beep sound */}\n        <audio\n          id='beep'\n          preload='auto'\n          ref={audio => {\n            this.playBeep = audio;\n          }}\n          src={beep}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/beep-06.0acf9f43.wav\";"],"sourceRoot":""}